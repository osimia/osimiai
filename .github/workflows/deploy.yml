name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

env:
  SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  REPO: ${{ secrets.GCP_REGION }}-docker.pkg.dev
  IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_SERVICE }}/app:${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate GCP_CREDENTIALS secret
        run: |
          if [ -z "${{ secrets.GCP_CREDENTIALS }}" ]; then
            echo "::error::Missing secret GCP_CREDENTIALS. Add your Service Account JSON to repository Secrets (Settings → Secrets and variables → Actions).";
            exit 1;
          fi
        shell: bash

      - name: Validate core deploy secrets (project/region/repo/service)
        shell: bash
        run: |
          missing=()
          [ -z "${{ secrets.GCP_PROJECT_ID }}" ] && missing+=(GCP_PROJECT_ID)
          [ -z "${{ secrets.GCP_REGION }}" ] && missing+=(GCP_REGION)
          [ -z "${{ secrets.ARTIFACT_REGISTRY }}" ] && missing+=(ARTIFACT_REGISTRY)
          [ -z "${{ secrets.CLOUD_RUN_SERVICE }}" ] && missing+=(CLOUD_RUN_SERVICE)
          if [ ${#missing[@]} -ne 0 ]; then
            echo "::error::Missing required secrets: ${missing[*]}";
            echo "Set them in GitHub → Settings → Secrets and variables → Actions";
            exit 1;
          fi

      - name: Validate GCP_CREDENTIALS JSON structure
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        shell: bash
        run: |
          python - <<'PY'
          import json, os, sys
          raw = os.environ.get('GCP_CREDENTIALS')
          if not raw:
              print("::error::GCP_CREDENTIALS is empty or missing")
              sys.exit(1)
          try:
              data = json.loads(raw)
          except Exception as e:
              print("::error::GCP_CREDENTIALS is not valid JSON: %s" % e)
              sys.exit(1)
          required = ["type","project_id","private_key","client_email"]
          missing = [k for k in required if not data.get(k)]
          if missing:
              print("::error::GCP_CREDENTIALS JSON is missing keys: " + ", ".join(missing))
              sys.exit(1)
          print("GCP_CREDENTIALS JSON looks valid.")
          PY

      - name: Authenticate to Google Cloud (JSON)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker --quiet ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t $IMAGE .

      - name: Push Docker image
        run: docker push $IMAGE

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE \
            --project $PROJECT_ID \
            --region $REGION \
            --image $IMAGE \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --cpu 1 \
            --memory 1Gi \
            --max-instances 5 \
            --set-env-vars DJANGO_DEBUG=false \
            --set-env-vars DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} \
            --set-env-vars ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
            --set-env-vars CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }} \
            --set-env-vars DB_ENGINE=django.db.backends.postgresql \
            --set-env-vars DB_NAME=${{ secrets.DB_NAME }} \
            --set-env-vars DB_USER=${{ secrets.DB_USER }} \
            --set-env-vars DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --set-env-vars INSTANCE_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }} \
            --set-env-vars USE_GCS=true \
            --set-env-vars GS_BUCKET_NAME=${{ secrets.GCS_BUCKET }} \
            --set-env-vars CHROMA_DB_PATH=/mnt/chroma \
            --add-cloudsql-instances ${{ secrets.INSTANCE_CONNECTION_NAME }} \
            --add-volume name=chroma-vol,type=cloud-storage,bucket=${{ secrets.GCS_BUCKET }} \
            --mount volume=chroma-vol,path=/mnt/chroma
