"""
Утилиты для работы с чатами
"""
import re
from typing import Optional


def generate_chat_title(first_message: str) -> str:
    """
    Генерирует название чата на основе первого сообщения пользователя.
    
    Args:
        first_message: Первое сообщение пользователя
        
    Returns:
        Сгенерированное название чата
    """
    if not first_message or not first_message.strip():
        return "Новый диалог"
    
    # Очищаем текст от лишних символов
    clean_text = first_message.strip()
    
    # Удаляем переносы строк и лишние пробелы
    clean_text = re.sub(r'\s+', ' ', clean_text)
    
    # Ключевые слова для определения темы
    legal_keywords = {
        'трудов': 'Трудовое право',
        'работ': 'Трудовое право', 
        'увольн': 'Трудовое право',
        'зарплат': 'Трудовое право',
        'отпуск': 'Трудовое право',
        'договор': 'Договорное право',
        'контракт': 'Договорное право',
        'семейн': 'Семейное право',
        'брак': 'Семейное право',
        'развод': 'Семейное право',
        'алимент': 'Семейное право',
        'наследств': 'Наследственное право',
        'завещан': 'Наследственное право',
        'собственност': 'Право собственности',
        'недвижимост': 'Недвижимость',
        'квартир': 'Недвижимость',
        'дом': 'Недвижимость',
        'земл': 'Земельное право',
        'участок': 'Земельное право',
        'админ': 'Административное право',
        'штраф': 'Административное право',
        'налог': 'Налоговое право',
        'уголовн': 'Уголовное право',
        'преступлен': 'Уголовное право',
        'граждан': 'Гражданское право',
        'иск': 'Гражданское право',
        'суд': 'Судебное право',
        'процесс': 'Судебное право',
        'конституц': 'Конституционное право',
        'права человек': 'Права человека',
        'бизнес': 'Предпринимательское право',
        'ооо': 'Корпоративное право',
        'ип': 'Предпринимательское право'
    }
    
    # Ищем ключевые слова в тексте
    text_lower = clean_text.lower()
    for keyword, category in legal_keywords.items():
        if keyword in text_lower:
            return category
    
    # Если ключевые слова не найдены, создаем название из первых слов
    words = clean_text.split()
    
    # Берем первые 3-5 значимых слов
    meaningful_words = []
    skip_words = {'как', 'что', 'где', 'когда', 'почему', 'зачем', 'какой', 'какая', 'какие', 
                  'можно', 'нужно', 'должен', 'может', 'ли', 'в', 'на', 'по', 'с', 'для', 
                  'от', 'до', 'при', 'о', 'об', 'и', 'или', 'а', 'но', 'да', 'нет'}
    
    for word in words[:10]:  # Рассматриваем только первые 10 слов
        clean_word = re.sub(r'[^\w]', '', word.lower())
        if len(clean_word) > 2 and clean_word not in skip_words:
            meaningful_words.append(word)
            if len(meaningful_words) >= 4:
                break
    
    if meaningful_words:
        title = ' '.join(meaningful_words)
        # Ограничиваем длину названия
        if len(title) > 50:
            title = title[:47] + '...'
        return title.capitalize()
    
    # Если не удалось создать осмысленное название
    if len(clean_text) > 50:
        return clean_text[:47] + '...'
    
    return clean_text or "Новый диалог"


def extract_question_topic(text: str) -> Optional[str]:
    """
    Извлекает основную тему вопроса для более точного именования.
    
    Args:
        text: Текст сообщения
        
    Returns:
        Тема вопроса или None
    """
    # Паттерны для определения типа вопроса
    question_patterns = {
        r'статья?\s*(\d+)': 'Статья {}',
        r'кодекс\s+(\w+)': 'Кодекс {}',
        r'закон\s+([^.?!]+)': 'Закон о {}',
        r'права?\s+([^.?!]+)': 'Права {}',
        r'обязанност[ьи]\s+([^.?!]+)': 'Обязанности {}',
        r'ответственност[ьи]\s+([^.?!]+)': 'Ответственность {}',
    }
    
    text_lower = text.lower()
    for pattern, template in question_patterns.items():
        match = re.search(pattern, text_lower)
        if match:
            return template.format(match.group(1).strip())
    
    return None
